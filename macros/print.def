include: macros_output/print.def

macros:
    printf_formats: sbcdoxXneEfFgGn
    printf_var: %s
    printf_python: %

subcode: parsecode_print
    $if $func eq "die"
        my ($n, $fmt)=fmt_string($param, 0)
        push @$out, "raise Exception($fmt)"
    $else
        my ($n, $fmt)=fmt_string($param, 1)
        $call get_print_to

        $if $print_to=~/^\@\$?(.+)/ # hack from perl syntax
            my $array = $1
            $call @simplify
            $call push_to_array, $array
        $else
            $call @hack_newline
            $call @simplify
            $if $print_to
                $call print_to
            $else
                $call print_1

    subcode: push_to_array(A)
        push @$out, "$(A).append($fmt)"

    subcode: hack_newline
        my $add_newline = 1
        $if $fmt=~/^"(.*)\\n"(.*)/
            $fmt = "\"$1\"$2"
        $else
            $add_newline = 0

    subcode: simplify
        $if $fmt=~/^"\%s" \% (.*)$/
            $fmt = $1

    subcode: print_1
        $if $add_newline
            push @$out, "print($fmt)"
        $else
            push @$out, "print($fmt, end='')"

    subcode: print_to
        $if $add_newline
            push @$out, "print($fmt, file=$print_to)"
        $else
            push @$out, "print($fmt, end='', file=$print_to)"

subcode: fmt_string_return
    my $vcnt = @arg_list
    my $f = join('', @fmt_list)
    my $a = join(', ', @arg_list)
    $(if:1)
        $if $vcnt == 1
            return ($vcnt, "\"$f\" % $a")
        $else
            return ($vcnt, "\"$f\" % ($a)")
    $(else)
        $f=~s/\%s/{}/g
        return ($vcnt, "\"$f\".format($a)")
