subcode: parse_init
    $(if:!skip_src_len)
        src_len=len(src)
        src_pos=0

    $call @init
    BLOCK

    # ----------------------------
    subcode: sub_loop
        while src_pos < src_len:
            BLOCK

    subcode: skip_unmatched_char
        $(if:strict)
            i0=src_pos-10
            i1=src_pos+10
            $if i0<0
                i0=0
            $if i1>src_len
                i1=src_len
            raise Exception('['+src[i0:src_pos]+']'+src[src_pos:i1])
        $(else)
            src_pos+=1
            continue


    # ---- with re module -------------------
    subcode: if_match_single(@pattern)
        $if_match $(pattern)
            BLOCK

    subcode: if_match_continue(@pattern)
        $if_match $(pattern)
            BLOCK
            continue

    subcode: if_match_break(@pattern)
        $if_match $(pattern)
            BLOCK
            break


#-------------------------------
#- e.g.
#-    fncode: parse_html(src)
#-        &call parse_loop
#-            &call if_match_continue, /<!--.*-->/
#-                pass

subcode: parse_loop
    &call parse_init
        &call sub_loop
            BLOCK
            $call skip_unmatched_char

#---------------------------------------- 
#- used inside a parse function
#-   e.g. fncode: parse_expr(src, ...)

subcode: parse_operator_precedence
    macros:
        atom: stack[$1][0]
        type: stack[$1][1]
        cur_atom: cur[0]
        cur_type: cur[1]

    #- prefix operators are grouped as 'unary'
    #- postfix operators are processed within match
    $-: precedence = {STRING[,]}
        'bof':0
        'eof':0
        '(':0
        ')':0
        $call @precedence
        'unary':99

    atom_type=[]
    unary_type=[]
    $call @type_list

    stack=[('', 'bof')]

    &call parse_init
        #- loop over each token --------
        $call debug_start
        $while 1
            #- lexer ------
            $do
                &call on_debug
                    $call debug_match
                $if src_pos>=src_len
                    cur = ("", "eof")
                    break
                $call @match
                $call skip_unmatched_char

            #- (check_precedence) -----------------
            $do
                &call on_debug
                    $call debug_process

                $if $(cur_type) in atom_type
                    #- atom ------------------
                    $if $(type:-1) in atom_type
                        print "cur: ", cur
                        $call error, "two adjacent atoms"
                $else 
                    #- operator ---------------
                    $if $(cur_type) in unary_type
                        $if not $(type:-1) in atom_type
                            cur=(cur[0], "unary")
                            break

                    $if len(stack)<=1
                        break

                    $if less_precedence($(cur_type), $(type:-2))
                        $call @reduce
                        continue

            $if cur is None
                continue

            $call @post_process

            #-- (shift) -----------------
            $if $(cur_type) == "eof"
                break
            $elif $(cur_type)
                stack.append(cur)

        #---- ------------------
        $(if:hascode:return)
            $call return
        $(else)
            $call default_return

    # ---------------------
    subcode: default_return
        $call @pre_return
        $if len(stack)!=2
            $call error, "unreduced parse stack"
        return stack[1]

    # ---------------------
    subcode: error(@msg)
        $print stack: $stack
        raise Exception($(msg))

    # ---------------------
    subcode: debug_start
        $(if:debug)
            debug_pos=$(debug)
            last_pos=0
            last_cur=None
            last_len=0

    subcode: on_debug
        $(if:debug)
            $if src_pos > debug_pos
                BLOCK

    subcode: debug_match
        $print start_of_match: src_pos=$src_pos

    subcode: debug_process
        $print process: cur=$cur
        stack_len=len(stack)
        $if src_pos==last_pos and cur==last_cur and stack_len==last_len
            print "cur: ", cur
            $call error, "dead loop in process"
        last_pos=src_pos
        last_cur=cur
        last_len=stack_len

