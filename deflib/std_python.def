#-- define macro PYTHON3 for python 3 in deflib/python/_config.def
#-- NOTE: python3 is the default now, define PYTHON2 otherwise

include: python/_config.def?
macros:
    comment: #
    ternary: $2 if $1 else $3
    re_str: line  # default in open_r

subcode: basic_frame
    NEWLINE?
    $def main
        $call @main

    $(block:global_exit)
        $: \x23 ---------------------------------------------------------
        $if __name__ == "__main__"
            main()

#---------------------------------------- 
subcode: class_RE
    $(setmacro:use_RE=1)
    $import re
    $(block:global_init)
        class RE:
            m = None
            def match(pat, str, flags=0):
                RE.m = re.match(pat, str, flags)
                return RE.m
            def search(pat, str, flags=0):
                RE.m = re.search(pat, str, flags)
                return RE.m

#---------------------------------------- 
subcode: open_r(name)
    with open($(name), "r") as In:
        for line in In:
            BLOCK

subcode: open_w(name)
    with open($(name), "w") as Out:
        BLOCK

subcode: open_W(name)
    print("  --> [%s]" % $(name))
    with open($(name), "w") as Out:
        $(set:print_to=Out)
        BLOCK

#---------------------------------------- 
subcode: dict_inc(V, key)
    $if not $(key) in $(V)
        $(V)[$(key)] = 1
    $else
        $(V)[$(key)] +=1

#---------------------------------------- 
include: ext.def
perlcode: quote
    my $var = $param
    $call grab_codelist
    $if $codelist
        push @$out, "$var = \"\"\"\n"
        $foreach $t in @$codelist
            push @$out, "$t\n"
        push @$out, "\"\"\"\n"


#---- timing --------------------------- 
subcode: start_time
    $import datetime from datetime
    start_time = datetime.now()

subcode: print_time(msg)
    time_diff = datetime.now()-start_time
    $print $(msg): $time_diff

#---------------------
subcode: error(@msg)
    # $print stack: $stack
    raise Exception($(msg))


