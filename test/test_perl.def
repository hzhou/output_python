filter: perl_to_python

macros:
    check_all: 1
    check_one: 1

page: test
    module: perl

    my $A = {a=>1, b=>2}
    my @B
    push @B, {c=>$A->{a}}
/*
    $(if:check_all)
        my $A = [1, 2, 3]
        my @B = @$A  # deepcopy
        my $n = @$A
        $dump $n

    $(if:check_all)
        my %A = (a=>1, b=>2)
        $if $A{c}
            $print
            $print A got key 'c'!
        $else
            $die Missing key 'c'

    $(if:check_all)
        my @A = qw(a b c)
        my $t = join(', ', @A)
        $print t = $t

        my $B = \@A
        my $s = join(' - ', @{$B})
        $print s = $s

    $(if:check_all)
        my %A = (a => 1)
        $if $A{a}
            $print A[a] = ${A['a']}

    $(if:check_all)
        my $a = "Hello "
        $a.= "World!"
        $print $a

    $(if:check_all)
        my $out=[]
        $(set:print_to=@$out)
        $print Hello "World!"
        $foreach $l in @$out
            print($l)
        $(set:print_to=)

    $(if:check_all)
        my $A={}
        my @B=(a => 2, b => 4)
        %$A = @B
        $print A{a} = ${A['a']}


    $(if:check_all)
        my $s="Hello World!"
        $if $s=~/(\w+)\s*(\w+)/ -> $a, $b
            $print a = $a, b = $b

        $_="Good morning!"
        my $p = {}
        $if /^----/
            $print Dashes!
        $elif /(\w+)\s*(\w+)/ -> $a*, $p->{desc}*
            my $b = $p->{desc}
            $print a = $a, b = $b
        $elif !exists $p->{desc}
            $print description does not exists!

    $(if:check_all)
        my ($name, $type) = ("A", "int")
        my $p = {name=>$name, type=>$type}
        $print p: $p

    $(if:check_all)
        my $a = "A"
        $if $a eq 'A'
            $print a is $a

    $(if:check_all)
        my $H = {A=>1, B=>2}
        $print ${H['A']}
    $(if:check_all)
        my ($a, @b, %c)
        my ($a1, $a2) = ("1", 2)
        $print $a1, $a2

    $(if:check_all)
        $print Hello World!

    $(if:check_all)
        $global %H
        $H{something} = "World"
        $print Hello ${H['something']}

    $(if:check_all)
        $for $p in qw(A B C)
            $print $p -
        $print

    $(if:check_all)
        $global @g_A
        $(for:1-3)
            push @g_A, $1
        $for $p in @g_A
            $print $p -
        $print

    $(if:check_all)
        &call open_r, "test_func.def"
            $print $_-
            last
*/
